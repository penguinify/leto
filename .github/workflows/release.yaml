name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - uses: pnpm/action-setup@v4
        with:
          version: latest  
          run_install: true 

      - name: Install JS dependencies
        run: pnpm install

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install Linux native dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl wget file \
            libssl-dev libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
          # Optional: add jammy repo if needed:
          # echo "deb http://gb.archive.ubuntu.com/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/jammy.list
          # sudo apt update && sudo apt install -y libwebkit2gtk-4.0-dev

      - name: Build with cargo
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (macOS/Linux)
        if: ${{ matrix.os != 'windows-latest' }}
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/* dist/ || true
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            zip -r "${{ matrix.target }}.zip" dist
          else
            tar -czvf "${{ matrix.target }}.tar.gz" dist
          fi

      - name: Package (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          Copy-Item -Path "target/${{ matrix.target }}/release/*.exe" -Destination dist/ -ErrorAction SilentlyContinue
          Compress-Archive -Path dist/* -DestinationPath "${{ matrix.target }}.zip"

      - name: Create Release & Upload
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.zip
            *.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
