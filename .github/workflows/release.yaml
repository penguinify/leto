name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          #- os: ubuntu-latest
           # target: x86_64-unknown-linux-gnu
          #- os: windows-latest
           # target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true

      - name: Install JS dependencies
        run: pnpm install

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install Linux native dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          echo "deb http://archive.ubuntu.com/ubuntu jammy main universe" | sudo tee /etc/apt/sources.list.d/jammy.list
          sudo apt update
          sudo apt install -y \
            libwebkit2gtk-4.0-dev \
            libsoup-3.0-dev \
            build-essential \
            curl wget file \
            libssl-dev libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Bundle with cargo-bundle
        run: cargo bundle --release --target ${{ matrix.target }}

      - name: Modify Info.plist and Codesign (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: |
          APP_PATH="target/${{ matrix.target }}/release/bundle/osx/"*.app
          PLIST="$APP_PATH/Contents/Info.plist"


          /usr/libexec/PlistBuddy -c "Add :NSMicrophoneUsageDescription string 'Discord needs your microphone'" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :NSCameraUsageDescription string 'Discord needs your camera'" "$PLIST" || true

          # Find the actual executable inside .app
          EXECUTABLE="$APP_PATH/Contents/MacOS/$(basename "$APP_PATH" .app)"

          # Ad-hoc codesign with entitlements
          codesign --force --deep --options runtime \
            --entitlements ./src/macos/leto.entitlements \
            -s - "$EXECUTABLE"

      - name: Package (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: |
          mkdir -p dist
          cp -r target/${{ matrix.target }}/release/bundle/osx/*.app dist/
          zip -r "${{ matrix.target }}.zip" dist/*.app

      #- name: Package (Linux)
      #  if: ${{ matrix.os == 'ubuntu-latest' }}
      #  shell: bash
      #  run: |
      #    mkdir -p dist
      #    cp target/${{ matrix.target }}/release/bundle/linux/* dist/ || true
      #    tar -czvf "${{ matrix.target }}.tar.gz" dist

      #- name: Package (Windows)
      #  if: ${{ matrix.os == 'windows-latest' }}
      #  shell: powershell
      #  run: |
      #    New-Item -ItemType Directory -Path dist -Force | Out-Null
      #    Copy-Item -Path "target/${{ matrix.target }}/release/bundle/windows/*" -Destination dist/ -ErrorAction SilentlyContinue
      #    Compress-Archive -Path dist/* -DestinationPath "${{ matrix.target }}.zip"

      - name: Create Release & Upload
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.zip
            *.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
